// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JwtRepository is an autogenerated mock type for the JwtRepository type
type JwtRepository struct {
	mock.Mock
}

// DeleteTokensOfUserExcept provides a mock function with given fields: ctx, userId, exceptionToken
func (_m *JwtRepository) DeleteTokensOfUserExcept(ctx context.Context, userId uint, exceptionToken string) error {
	ret := _m.Called(ctx, userId, exceptionToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, userId, exceptionToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, token
func (_m *JwtRepository) Exists(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, userId, token, ttl
func (_m *JwtRepository) Insert(ctx context.Context, userId uint, token string, ttl time.Duration) error {
	ret := _m.Called(ctx, userId, token, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, time.Duration) error); ok {
		r0 = rf(ctx, userId, token, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTokensCount provides a mock function with given fields: ctx, uid
func (_m *JwtRepository) UserTokensCount(ctx context.Context, uid uint) (uint, error) {
	ret := _m.Called(ctx, uid)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, uint) uint); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
