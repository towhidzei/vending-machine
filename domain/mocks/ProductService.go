// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/apm-dev/vending-machine/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, name, amount, cost
func (_m *ProductService) Add(ctx context.Context, name string, amount uint, cost uint) (*domain.Product, error) {
	ret := _m.Called(ctx, name, amount, cost)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, string, uint, uint) *domain.Product); ok {
		r0 = rf(ctx, name, amount, cost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint, uint) error); ok {
		r1 = rf(ctx, name, amount, cost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Buy provides a mock function with given fields: ctx, cart
func (_m *ProductService) Buy(ctx context.Context, cart map[uint]uint) (*domain.Bill, error) {
	ret := _m.Called(ctx, cart)

	var r0 *domain.Bill
	if rf, ok := ret.Get(0).(func(context.Context, map[uint]uint) *domain.Bill); ok {
		r0 = rf(ctx, cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bill)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[uint]uint) error); ok {
		r1 = rf(ctx, cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProductService) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx
func (_m *ProductService) List(ctx context.Context) ([]domain.Product, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, name, amount, cost
func (_m *ProductService) Update(ctx context.Context, id uint, name string, amount uint, cost uint) (*domain.Product, error) {
	ret := _m.Called(ctx, id, name, amount, cost)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, uint, uint) *domain.Product); ok {
		r0 = rf(ctx, id, name, amount, cost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string, uint, uint) error); ok {
		r1 = rf(ctx, id, name, amount, cost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
